BakaBakaMark EBNF Grammar Version 2.0.0 (DRAFT)
===============================================

Start Symbols
-------------

"""
BakaBakaMark
 | Blocks EOF
 ;

Blocks
 | (BlockStart Block)*
 ;
 
BlockStart
 | (NL (SPACES)?)*
 ;
 
Block
 | SPACES?
   (
   | Div
   | CodeBlock 
   | BlockQuote
   | List 
   | DefList
   | Table
   | HorizontalRule
   | ATXHeader
   | BlockID
   | BlockClass
   | BlockStop
   | URLAnchor
   | Paragraph
   )
 ;
"""



Block-level Grammar
-------------------

=== Div Block ===

"""
Div
 | SPACE{N} DIV_DELIM Blocks SPACE{N} DIV_DELIM
 ;
"""

Arbitrary block-level container to be transformed with the BlockID or 
BlockClass elements.

For a """Div""" to terminate gracefully, the number of asterisks in the 
closing delimiter token must be the same as the starting token's. Moreover, 
these asterisks must start on the same column on a blank line.

See also: **Block Element Indentation Rules** for nesting other block elements 
inside the Div block.



=== Block Directives ===

"""
BlockID
 | FULLSTOP SPACE ~(NL)+ NL
 ;
 
BlockClass
 | FULLSTOP{2} SPACE ~(NL)+ NL
 ;
"""

The """BlockID""" and """BlockClass""" parses the rest of the content on 
its line as a CSS class or ID, **One value per line**. These values will be 
applied to the next content-holding sibling block element in the tree.

The CSS class or ID values need white space characters stripped from them. 
The node shall have no effects on the following conditions:

- The value is empty after white space stripping.
- The Block ID's value has already been defined earlier in the document.

////
"""
. Figure 1.
.. Gallery
.. Left
****
!<MyImage.jpg>
!<MyImage2.jpg>

This is a gallery's caption.
****
"""
////



=== ATX Header ===

"""
ATXHeader
 | ATX ATXContent ATX_END
 ;
 
ATXContent
 | ~(ATX_END)
 ;
"""

One-liner header. Inline formatting constructs are effective like a regular 
paragraph, but the text cannot contain any line break characters or end with 
an """ATX_END""" token. See also: **Inline-Level Grammar**.




=== BlockQuote ===

"""
BlockQuote
 | GT_THAN Blocks
 ;
"""

For nesting blocks inside a block quote, See **Block Element Indentation 
Rules**.






=== Code Block ===

"""
CodeBlock
 | CODE_FENCE
   [~(CODE_FENCE)]+
   (?<=NL | NL SPACES) CODE_FENCE
 ;
"""

All white space and line breaks are preserved. No grammar rule interpretation 
will occur inside the block, except for the closing """CODE_FENCE""" token. 

Only a matching """CODE_FENCE""" token will be able to close a code block. 
Failure to close the block results interpreting the rest of the document 
as a CodeBlock. A matching CODE_FENCE token is one that...

1. Has the same number of double quotes (") as the fence.
2. Starts on the same column as the starting fence.
3. The only token on its line.

In case of an indented CodeBlock, all lines shall be trimmed N leading white 
space characters defined by **WS**, where N is the number of space characters 
preceding the line.



=== Comment Block ===

"""
CommentBlock
 | COMMENT_DELIM 
   [~(COMMENT_DELIM)]+
   (?<=NL | NL SPACES) COMMENT_DELIM
 ;
"""

Same as CodeBlock, except it will not be rendered in the output by default.



=== Horizontal Rule ===

"""
HorizontalRule
 | HR
 ;
"""

Starting a line with four or more consecutive hyphen-minus, followed by the 
end of the line, is a horizontal rule.



=== URL Anchor ===

"""
URLAnchor
 | LINK_REF [~(NL | LINK_REF_END)]+ LINK_REF_END [~(NL)]+ NL
 ;
"""

A reference link anchor (URLAnchor) has non-empty two components after their 
leading and trailing white space characters trimmed.

1. The ID stored inside the braces, """:{ID}:""", 
2. The URL on the rest of the line.

If both values are not empty after trimming, this node shall create a ID:URL
mapping in the global URL symbol table. Subsequent ID:URL mapping with 
duplicate ID shall override the previously defined URL value.

This node has no visible rendering.




=== Flat Lists ===

"""
OrderedList
 | (OL_ListItem)+
 ;
 
UnorderedList
 | (UL_ListItem)+
 ;
 
OL_ListItem
 | OL_ITEM Block Blocks
 ;
 
UL_ListItem
 | UL_ITEM Block Blocks
 ;
"""

See also **Block Element Indentation Rules** for nested lists, block quotes,
and tables.



=== Definition Lists ===

"""
DefList
 | (DefTermGroup DefDescGroup)+
 ;
 
DefTermGroup
 | DefTerm+ 
 ;
 
DefTerm
 | DT_MARKER Paragraph
 ;
 
DefDescGroup
 | DefDesc+ 
 ;
 
DefDesc
 | DD_MARKER Blocks
 ;
"""

The Paragraph in the DefTerm node should contain the children of the 
Paragraph node, not the paragraph node itself.

A definition list continues so long as it keeps encountering definition terms 
and definition descriptions (DD) blocks. Logical structures of the DefDesc 
element is determined by **Block Element Indentation Rules**.

DD nodes at the beginning of the list, and DT nodes at the end of the list 
are to be removed from the syntax tree.




=== Table ===

"""
Table
 | TableRowStart (TABLE_ROW_DELIM TableRow)+
 ;
 
TableRowStart
 | (TableCell | TableHead)+ 
 ;
 
TableRow
 | TableRowStart
 | TABLE_ROW_DELIM
 ;
 
TableCell
 | TABLE_CELL_DELIM TableCellContent
 ;
 
TableHead
 | TABLE_HEAD_DELIM TableCellContent
 ;
 
TableCellContent
 | (Blocks | SPACES? NL)
 ;
"""

TABLE_ROW_DELIM tokens that is not immediately followed or preceded by either 
a TableCell or a TableHead element has no effect.

A table starts as soon as there's either a TableHead or TableCell element, 
which starts the table's first row, and its size determines the number of 
columns each row in the table must contain.

The row size is determined by the number of TableHead or TableCell on the 
same column before the row terminates, either from insufficient block 
indentation, or from a TABLE_ROW_DELIM on the same column.

Subsequent rows in the table, if they contain at least one cell, and their 
column count differ from the first row's, shall have extra columns discarded, 
and empty columns padded with empty cells. Table rows that have no cell are 
removed from the parse tree.



=== Paragraph ===

"""
Paragraph
 | ParaContent ParaEnd
 ;
 
ParaContent
 | ~(ParaEnd)
 ;
 
ParaEnd
 | NL SPACE? (ParaEndNormal | ParaEndSetextH1 | ParaEndSetextH2)
 ;
 
ParaEndNormal
 | NL
 | DIV_DELIM
 ; 
 The paragraph end as """<p>""" or a paragraph.
 
ParaEndSetextH1
 | ATX_END
 ;
 The paragraph ends and is promoted to a """<h1>""" element.
 
ParaEndSetextH2
 | HR
 ;
 The paragraph ends and is promoted to a """<h2>""" element.
"""

A paragraph begins with a visible character, and continues as long as 
it doesn't encounter one of the four following conditions:

- If the paragraph starts on column X > 0, and a non-white space character 
  appears in column N < X.
- A blank line.
- A line started by a Setext delimiter (HorizontalRule or ATX_END)
- A line started by a Div delimiter (DIV_DELIM)

After determining the boundary of the paragraph, its contents (ParaContent) 
are subject to the rules described in the section **Inline-Level Grammar**.





Block Element Indentation Rules
-------------------------------

BakaBakaMark is an indentation sensitive lightweight markup language. 
That is, the document's logical structure depends on white space and 
indentation. The Rules:

0. All white spaces are treated equally for the purpose of determining 
   indentation and nesting. For further details, refer to the """SPACE""" 
   token definition.

1. Every line of text in a **Paragraph** must be indented to the same column 
   that started the first line of the paragraph, or deeper. Each line after 
   the first shall be stripped of leading white spaces.
   
2. The first non-space token on the same line determines the minimum 
   indentation level for selected block elements. These elements are:
   
   - **TableHead**
   - **TableCell**
   - **Blockquote**
   - **OL_ListItem**
   - **UL_ListItem**
   - **DefTerm**
   - **DefDesc**
   
   All block elements are counted as a child of the forementioned elements 
   so long as they meet the minimum indentation requirement. Sample code:
   
   """
   + + Item 1.1
     + Item 1.2
     
     Item 1, paragraph 1 after the first bullet list.
     
     + Item 1.1
     - Item 1.2
     
     Item 1, paragraph 2 after the second bullet list.
     
   + Item 2, paragraph 1, because it's not indented enough to be counted 
     as part of Item 1.
   """
   
3. For **Div** and **CodeBlock**, the minimum indentation level is 
   determined by the opening delimiter token's column number instead.
   
   """
    ****
    Part of the aside block
    
    Part of the aside block
    
   Div block terminated due to insufficient indentation.
    ****
    Another aside block.
    ****
   """
   
4. **CommentBlock**, **CodeBlock** are exempt from rule 1 and rule 2.





Inline-Level Grammar
--------------------

The context involved at this level is strictly inline; Block-level grammar 
rules, such as indentation, nesting, and bullet lists do not apply. This 
grammar is effective for the lexical tokens extracted from the rule 
**ParaContent** and *ATXContent** in the section **Block-Level Grammar**.


"""
Paragraph
 | TextFrag+

TextFrag
 | TextFrag_Bold
 | TextFrag_Subscript
 | TextFrag_Superscript
 | TextFrag_Italic
 | TextFrag_Delete
 | TextFrag_Underline
 | TextFrag_Insert
 | TextFrag_Code
 | Link
 | ~[
    BOLD
    SUB
    SUP
    ITAL
    DEL
    UNDERLINE
    CODE
    LINK_INT
    LINK_WIKI
    LINK_EXT
    LINK_IMG
    ]+
 ;

TextFrag_Bold
 | BOLD TextFrag BOLD
 ;
 
TextFrag_Subscript
 | SUB TextFrag SUB
 ;
 
TextFrag_Superscript
 | SUP TextFrag SUP
 ;
 
TextFrag_Italic
 | ITAL TextFrag ITAL
 ;
 
TextFrag_Underline
 | UNDERLINE TextFrag UNDERLINE
 ;
 
TextFrag_Delete
 | DEL TextFrag DEL
 ;

TextFrag_Code
 | (CODE | CODE_FENCE) ~(CODE | CODE_FENCE)+ (CODE | CODE_FENCE)
 ;
 The starting and ending CODE need to match in the number of double quote 
 characters. Moreover, in TextFragLink context, this operator has a higher 
 precedence than the closing square bracket. That is:
 
 """
 #<Wiki Link>-["""?<URL>-[Sample Code]"""]
 """
 
 """
 <a href="Wiki Link">
  <code>
   ?&lt;URL&gt;-[Sample Code]
  </code>
 </a>
 """



TextFragLink
 | TextFragLink_Bold
 | TextFragLink_Subscript
 | TextFragLink_Superscript
 | TextFragLink_Italic
 | TextFragLink_Delete
 | TextFragLink_Underline
 | TextFragLink_Insert
 | TextFrag_Code
 | ~[
    BOLD
    SUB
    SUP
    ITAL
    DEL
    UNDERLINE
    CODE
    ]+
 ;

TextFragLink_Bold
 | BOLD TextFragLink BOLD
 ;
 
TextFragLink_Subscript
 | SUB TextFragLink SUB
 ;

TextFragLink_Superscript
 | SUB TextFragLink SUB
 ;
 
TextFragLink_Italic
 | ITAL TextFragLink ITAL
 ;
 
TextFragLink_Underline
 | UNDERLINE TextFragLink UNDERLINE
 ;
 
TextFragLink_Delete
 | DEL TextFragLink DEL
 ;




Link
 | (LinkExt | LinkInt | LinkWiki) (LinkContinue LinkDisplay)?
 | LinkImage (LinkContinue LinkAlt)
 ;
 
LinkDisplay
 | LINK_CONT TextFragLink BRACKET_R
 ;
 Changes the default display text of hyperlinks (URL).
 
LinkAlt
 | LINK_CONT URLSquare BRACKET_R
 ;
 Changes the default alt text for images.

LinkContinue
 | SPACES? NL? SPACES?
 ;
 
LinkWiki
 | LINK_WIKI URLAngle GT_THAN
 ;
 
LinkExt
 | LINK_EXT URLAngle GT_THAN
 ;
 
LinkImage
 | LINK_IMG URLAngle GT_THAN
 ;
 
LinkInt
 | LINK_INT URLSquare BRACKET_R
 ;

URLAngle
 | ~(GT_THAN)+
 ;
 This is the """src""" attribute for LinkImage, or """href""" attribute 
 for LinkInt, LinkWiki.
 
URLSquare
 | ~(BRACKET_R)+
 ;
 This is the """href""" attribute for LinkInt.
"""



Lexical Token Listing
---------------------

=== Block Tokens ===

"""
DIV_DELIM
 | [*]{4,} (?=NL)
 ;
 
FULLSTOP
 | "."
 ;

ATX_END
 | [=]+ (?=(NL))
 | NL
 ;
 
ATX
 | [=]+
 ;

 
GT_THAN
 | ">"
 ;
 Starts a BlockQuote


CODE_FENCE
 | CODE (?=NL)
 ;

COMMENT_DELIM
 | [/]{4,} (?=NL)
 ;
 
HR
 | [-]{4,} (?=NL)
 ;


LINK_REF
 | ":{"
 ;
	
LINK_REF_END
 | "}:"
	;
 

DT_MARKER
 | ";" SPACE
 ;
 
DD_MARKER
 | ":" SPACE
 ;


OL_ITEM
 | [#] "." SPACE
 | [0-9]+ "." SPACE
 ;
 
UL_ITEM
 | [-+*\\u2022\\u2043] SPACE
 ;


TABLE_HEAD_DELIM
 | "!!"
 ;

TABLE_CELL_DELIM
 | "||"
 ;
 
TABLE_ROW_DELIM
 | "|" [=]+ (?=NL)
 ;
"""



=== Inline Formatting Tokens ===

"""
UNDERLINE
 | "__"
 ;
 
SUB
 | ",,"
 ;

SUP
 | "^^"
 ;
 
BOLD
 | "**"
 ;
 
ITAL
 | "''"
 ;
 
CODE
 | ["]{3,}
 ;
 
DEL
 | "--"
 ;
"""



=== Inline Hyperlink Tokens ===

"""
LINK_CONT
 | "-["
 ;
 
LINK_INT
 | "#["
 ;

LINK_WIKI
 | "#<"
 ;

LINK_IMG
 | "!<"
 ;

LINK_EXT
 | "?<"
 ;
 
BRACKET_R
 | "]"
 ;
 Closes LinkContinue, LinkInt
 
GT_THAN
 | ">"
 ;
 Closes LinkExt, LinkWiki, LinkImage.
"""


=== Controls ===

"""
SPACE
 | WS
 ;

SPACES
 | WS{2,}
 ;

WS
 | [ \t\u2000-\u200d\u205f\u1680\u237d\u2420\u2422\u2423\u3000]
 ;
 
NL
 | \\r\\n?
 | \\n
 | \\u2028
 | \\u2029
 | \\u0085
 | \\v
 | \\f
 ;
 
EOF
 | Epsilon
 ;
End of input stream. When encountered, terminate all parsing immediately.
 
ESCAPE
 | (?<=\\\\) ~(WS | NL)
 ;
Turns non-whitespace character immediately after the single backslash 
into the default TEXT token, discarding the preceding backslash.
"""

