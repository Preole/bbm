BakaBakaMark Command Line Usage
===============================

NAME
----

**bbm** - An an experimental lightweight markup language built for read, 
writ-ability, and a versatile main syntax. This program generates an HTML5 
scaffolding standalone file given some plain text in bbm syntax.


SYNOPSIS
--------

bbm inFile outFile [-options] [-cfg config-file]



NOTES
-----

bbm currently only accepts and outputs UTF-8 encoded files.



ENVIRONMENT
-----------

node.js >= 0.8.0.




OPTIONS
-------

; -v
: Prints version information and exits.

; -h
: Prints this help file and exits.

; -cfg path/to/config-file.json
: Specifies a configuration file for inserting meta data into the generated 
  HTML file. This configuration file should be in valid JSON format. For 
  detailed information, consult the sample JSON file @ CONFIG REFERENCE.



CONFIG REFERENCE
----------------

Minimal configuration file: (Also the default if the config file is left 
unspecified.)

""""
{
 "title": "This is your document's Title",
 "meta": [],
 "extern": {
  "css" : [],
  "js" : []
 },
 "intern": {
  "css" : [],
  "js" : []
 },
 "cfg": {}
}
""""



Complete reference:

""""
{
 //string: HTML Page Title
 "title": "This is your document's Title",
 
 //Array: Recommended meta tags to insert into the page.
 //Use an empty array if no meta tags to specify.
 "meta": [
  {
   "key" : "author",
   "value" : "Your Name(s) Here"
  },
  {
   "key" : "description",
   "value" : "The description of the web page. (For SEO)"
  },
  {
   "key" : "keywords",
   "value" : "Keywords for search engines, Comma-Separated."
  }
 ],
 
 //External CSS & Javascript, referenced using relative path.
 "extern": {
 
  //Required; Use empty array if not importing anything
  /*
  Each object has these two properties:
   fpath : Relative file path to the CSS file.
   mediaQ : (Optional) The media query string, which specifies the type and 
    specific conditions this CSS applies to the webpage. An incorrect media 
    query string will result in invalid W3C HTML.
  */
  "css" : [
   {
    "fpath" : "file1.css",
    "mediaQ" : ""
   },
   {
    "fpath" : "file2.css",
    "mediaQ" : ""
   }
  ],
  
  //Required; Use empty array if not importing anything
  //Expects a list of strings (file path to javascript files to link to)
  "js" : [
   "f1.js",
   "f2.js"
  ]
 },
 
 //Embedded Javascript & CSS; These are read from an external file and 
 //written directly into the HTML file. If the files are not found, an
 //exception will be generated.
 "intern": {
 
  //Required; Use empty array if not embedding anything.
  //Same object as extern.css
  "css" : [
   {
    "fpath" : "file1.css",
    "mediaQ" : ""
   },
   {
    "fpath" : "file2.css",
    "mediaQ" : ""
   }
  ],
  
  //Required; Use empty array if not embedding anything
  "js" : [
   "f1.js",
   "f2.js"
  ]
 },
 
 //Compiler configuration; See: COMPILER OPTION REFERENCE
 "cfg": {
 
  //Basic options
  "OPT_BASE" : {
   "RM_EOL" : 0,
   "MAX_BLOCKS" : 8,
   "MAX_SPANS" : 10,
   "ALLOW_IMG" : 1,
   "ALLOW_LINK" : 1,
   "ALLOW_CLASS" : 1,
   "ALLOW_ID" : 1
  },

  //HTML-specific options
  "OPT_HTML" : {
   "MAX_ATTR_CHARS" : 2048,
   "CSS_PRE" : "bbm-",
   "CSS_WIKI" : "w-bbm",
   "MIN_HEADER" : 0,
   "XHTML" : 0
  }
 }
}
""""




COMPILER OPTION REFERENCE
-------------------------

=== OPT_BASE ===

Front-end customization. Options under this category applies to all output 
regardless of the code generator (In the future) used.



==== MAX_SPANS ====

Type: """number"""; Default: """10"""

Maximum inline element nesting level. Further inline level tokens shall be 
treated as literal text.



==== MAX_BLOCKS ====

Type: """number"""; Default: """8"""

Maximum block element nesting level. Further block level tokens shall be 
treated as literal text.



==== RM_EOL ====

Type: """boolean"""; Default: """false"""

Remove End of line characters, so they are not considered as significant 
white space by the target document. Useful for East-Asian alphabets, which 
do not treat line breaks as white space.



==== ALLOW_LINK ====

Type: """boolean"""; Default: """true"""

Allows Hyperlinks; Applies to Internal, External, and custom hyperlinks.



==== ALLOW_IMG ====

Type: """boolean"""; Default: """true"""

Allows Images.



==== ALLOW_ID ====

Type: """boolean"""; Default: """true"""

Allows custom CSS ID



==== ALLOW_CLASS ====

Type: """boolean"""; Default: """true"""

Allows custom CSS classes



=== OPT_HTML ===

HTML output specific setting used by the code generator. The following list 
describes the possible options present in the built-in HTML code generator.



==== MAX_ATTR_CHARS ====

Type: """number"""; Default: """2048"""

Maximum character length of a tag's attribute value; This applies to 
custom CSS ID, classes, hyperlink URLs, but is not limited to such.



==== CSS_PRE ====

Type: """string"""; Default: """bbm-"""

CSS prefix string for avoiding namespace poisoning using the BlockID and 
BlockClass elements. This string value should not contain any control or 
white space characters.



==== CSS_WIKI ====

Type: """string"""; Default: """w-bbm"""

CSS class constant for wiki (customizable) links. This all wiki links are 
given this class name, so they can be selected for further processing 
without affecting other types of links.



==== XHTML ====

Type: """boolean"""; Default: """false"""

Output valid XHTML instead of HTML; Only applies for printing HTML String. 
(No effect on generating HTML DOM trees)



==== MIN_HEADER ====

Type: """number""" (Integer); Default: """0"""

If this value is greater than 0, all """<h1>""" to """<h6>""" HTML tags 
will be incremented by one level, up to a maximum of 6. Set this value if 
you plan to automatically outline the HTML document containing this snippet.
  
  

SYNTAX REFERENCE
----------------

=== Inline Element: Links ===

; """?<ExternalURL>-[Display Text]"""
: Default External Hyperlink. If protocol prefix such as """http://""" is 
  omitted, it is defined a relative link.

; """#<PlatformSpecificURL>-[Display Text]"""
: By default, same effect as External hyperlink. However, its URL values 
  may have special effects that transform the link into something else 
  depending on the hosting backend. 
  
  For **BareBonesWiki**, This links to another entry within the wiki with 
  the title denoted by the URL value.

; """!<ImageURL>-[Alt Text]"""
: Image element.

; """#[LinkID]-[Display Text]"""
: Internal Link within the same document.



=== Inline Element: Text-Formatting ===

""""
**Bold** 

''Italic'' 

^^Superscript^^ 

,,Subscript,, 

__Underline__

{++Insertion++} 

{--Deletion--} 

"""Verbatim Text/Code Snippet"""
""""



=== Block Element: Reference-Style Links ===

One of the four hyperlink types, then define the identifier and 
URL pairing elsewhere. (It is considered a block-level element)

"""
!<RefID>-[Reference-Style Image]

:{RefID}: image.jpg
"""



=== Block Element: Paragraphs ===

"""
    Type away. If you line-wrap manually, 
    make sure every line starts on the 
    same column, lined up against the 
    left-margin.

    Use blank lines (Two enter keys) to 
    separate paragraphs.

    Insufficient indentation
will prematurely terminate the paragraph.

Tabstops are considered as one space for 
the purpose of determining indentation. 
Spaces are highly recommended.
"""



=== Block Element: Blockquotes ===

"""
> Greater than sign, then insert the block 
  element of choice.

  """
  Use indentation to denote that the block 
  element is nested inside the blockquote.
  """

  > Use multiple """>""" to nest blockquotes.
"""



=== Block Element: Setext Header ===

"""
Most important header is underlined 
with a row of equal signs. Do not 
include trailing spaces after these 
signs. They may span multiple lines.
===================================

A row of hyphen minus denotes the 
second most-important header. **May 
contain inline elements such as 
phrase emphasis.**
-----------------------------------
"""



=== Block Element: One-liner Header ===

"""
= Most important
== 2nd most important
=== 3rd most important
[...]
[...]
[...]
======= Six or more "=" are equally important

=== Optionally close with equal signs ====
=== Inline elements are **ineffective**. ===
"""


=== Block Element: Fenced Code (Verbatim) Block ===

""""
"""
Begin a line with at least three or 
more double quotes, then press return.

All text will be interpreted literally.
**No text formatting**. All spaces and 
line breaks are preserved.

Place an equal number of double quotes 
on the same column as the starting fence, 
then end the line immediately to end 
the code block.
"""
""""



=== Block Element: Bullet Lists ===

"""
- Bullet 1
* Bullet 2

  - 2.1
  - 2.2

    Another paragraph in 2.2

  - 2.3

+ Bullet 3
"""



=== Block Element: Numbered Lists ===

"""
1. One
2. Two
#. Three
4. Four
"""



=== Block Element: Definition List ===

"""
; Term
: Description

  Another paragraph in description

  ; Nested Term
  : Nested Description

; Term 2
: Description 2
"""



=== Block Element: Tables ===

"""
!! Header Cell Row 1 Col 1
!! Header Cell Row 1 Col 2
|====
|| Normal Cell Row 2 Col 1
|| Normal Cell Row 2 Col 2
"""



=== Block Element: Horizontal Rule ===

A row of 4+ hyphens with no text in 
the previous line.

"""
----------------
"""



=== Block Element: Aside Block ===

"""
****
This is an aside, or an arbitrary 
block. Use a pair of lines of four 
or more asterisks to fence off the 
block area, or prematurely end it 
with insufficient indentation.

Mostly used to add hooks for CSS 
selectors, so that the block element 
can be selected to undergo further 
processing.
****
"""



=== Block Element: Custom ID & Classes ===

"""
. My Identifier
.. My Class

The next content-holding block 
element will be given the CSS 
ID and Class defined in these 
lines, such as this paragraph.
"""



=== Block Element: Comment Block ===

"""
////
This part of the document shall 
not be rendered.
////
"""



=== Backslash Escape ===

"""
\\*\\*Treats the next visible 
character as literal text.\\*\\*

The leading backslash always 
disappear, even in code blocks, 
URLs and other verbatim text 
context.

Double the number of backslashes 
\\\\ to print literal backslashes.
"""