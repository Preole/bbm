November 25^^th^^, 2013
=======================

I've finished my parser the way I wanted it to be.  It took me a lot of 
effort to make the code readable and maintainable. It took me even more 
effort to avoid polynomial-time backtracking when the writer attempts 
to abuse the parser. In short, hand-written parsers are hard, especially 
if I want to specify my own error recovery behavior.

I'm really surprised that phrasing-level content can be rather difficult 
to parse. In fact, these content constitute almost half of my parser's code 
base, because I decided that my parser should never backtrack from the input 
stream, and never stop on errors. However, I'm very happy with my decision; 
The parser's running in linear-time no matter how hard I'm trying to abuse 
it, and the error-recovery output is reasonable.

Finally, I need another lexicon change within my grammar, as well as adding 
a syntax for character escaping. The latter is very much wanted because 
sometimes, it's really important to use the literal characters themselves.





Lexical Changes
---------------

I may make changes to the following syntax, because I'm not perfectly happy 
with them yet.

- Bold

  The new symbol is two consecutive "at signs (@)", changed from two 
  asterisks, since they're more visually obstrusive and really get the 
  point across.

- Italic

  Italics now use the symbol previously used by the Bold syntax; Double 
  asterisks. This syntax is changed because of the conflict between 
  typewriter's single quote and the English (plus many other) language.

- Code & Code Block

  They now use three or more consecutive typewriter's doublequotes ("), 
  similar to Python's long string syntax. I use this symbol whenever I want 
  to express something in verbatim, which is a programmer's habit. As such, 
  I felt that using " is more appropriate for a code snippet.



Introducing Character Escape
----------------------------

This is where it gets hard. I keep thinking I should just force my writers 
to use double backslash and be done with it. I'm really tempted. Yet, this 
creates problems when the article's topic is about programming and 
regular expressions, both of which often use the backslash character 
literally.

The other solution is to shut up and use white space, if it's really 
necessary to have a bold (now Italic) phrase start and end with asterisks. 
Unfortunately, this option is terrible for languages other than English, 
where whitespaces are significant.

Another way would be wrapping the code snippet syntax around these 
characters. This generates a lot of visual noise and an extra set of non-
semantic tags.

"""
**"""*"""This sentence is notoriously noisy."""*"""**

The same sentence using backslash escapes is much cleaner.

**\\*This sentence is notoriously noisy\\***
"""

The option I @@Really@@ don't want to take is implementing context-sensitive 
character escapes, like most programming languages and LMLs have done. This 
decision will result in ambiguity inside the inline code snippet syntax. 

The next particular Japanese code snippet is a problem, and white space 
around the starting and ending quotation mark aren't an option. (Disclaimer: 
I typed some Hirigana at random.)

"""
 チテテタキ"""\\"チコソイタ\\""""タテイキシ
"""

I have no idea whether to render the backslash or not, though I can now 
include quotation marks inside the code snippet without white space inbetween 
which makes CJK typesetting really, really ugly.



Here's a summary of my options, and all of them have serious weaknesses 
that make me hesitate.

#. Context-insensitive backslash
#. Whitespace between phrasing content
#. Code-snippet syntax around the desired literals
#. Context-sensitive backslash

The least damage one is context-insensitive backslash. The user simply has 
to search & replace all backslashes with two backslashes inside code block 
sections and that's it. Inline code snippets, such as regular expressions, 
are not so lucky however. They're doomed to backslash plagues forever.

I already had a debate on character escape's design decision, quoting myself.

> Escape token, resolve at Syntax analysis:

  + Allows using literal backslash in code spans, blocks, URLs, and other
    situations requiring verbatim text without needing to use two 
    backslashes. 
  * Normal paragraph text still requires double backslashes for
    literal representation.
  - Ineffective during verbatim section of the text. (That is, it cannot
    be used to escape the closing delimiter without adding symbols.)
  - Generates a lot of tokens should somebody wish to abuse the system.
  - Burdens the parser, which already has a lot of work to do.
  - Inconsistent behavior in different context, and difficult to reproduce
    consistent behavior.

  Resolve at lexical analysis:

  * The next character after the backslash has no effect, no matter the
    circumstances.
  + This dead simple rule is consistent, provides syntax escaping when it is
    **Really necessary**, 
  - Users will be surprised at vanishing backslashes when they try to 
    use the text literally, like code blocks and URL containing 
    backslashes. This is especially a problem when talking about 
    programming and computers.
  * Is less vulnerable to backslash spam abuse by a factor of 2.
    (Every two backslashes form one token, where as the escape token 
    method forms a token with every backslashes. However, I'm sure that 
    production level compilers have had to deal with much worse.
    
  Don't provide this feature: [X]

  + Easier implementation, 100% consistent behavior.
  * Discourages certain writing style. This is assuming that backslashes are
    ugly and makes the text ugly, and as such, they should be avoided. However,
    aesthetics is a matter of perspective and depend highly on individuals.
  - User experience suffers when something literal is absolutely needed.

  Ultimately abandoned. A good language shouldn't **Need** escapes.




{--Introducing Forced Line Break--}
-----------------------------------

Disclaimer: I'm risking feature creeping here, because it's not a very 
important syntax.

"""
"|" SPACE
"""

This is the forced line break token. If it's hard aligned against the 
paragraph's left margin, it will generate a line break token in the abstract 
syntax tree. There are some exceptional cases with this guy, however.

- Line break in URL/Image alt text
- Line break in Code snippet
- Indenting against the line break token's margin

In the first case, it should be interpreted literally, no doubt about that.
The second case... I don't know whether to treat that literally, or not. 
This is the same dilemma as the character escape.
The third case... is best explained by a code snippet.

| Paragraph ?<URL On a new line
  The two leading spaces. Should I 
  count them or no?>
| No, screw it. This line is so long
  It needs to be hard-wrapped.
  
{++I'm throwing it away. If I wanted to do a line block, I should just use a 
<pre> or preformatted text block.++}